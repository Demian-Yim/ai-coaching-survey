import React, { useEffect, useState, useMemo } from 'react';
import { useParams } from 'react-router-dom';
import { generateDiagnosisFeedback } from '../services/geminiService';
import { downloadResultsAsPDF } from '../services/pdfService';
import { fetchSubmissionById } from '../services/dataService';
import type { DiagnosisResult } from '../types';
import Spinner from './common/Spinner';
import { Bar, BarChart, XAxis, YAxis, Tooltip, ResponsiveContainer, Cell } from 'recharts';

// --- Qualitative Analysis Data ---

const LEVELS = [
    { name: 'üòä ÌÉêÌóòÍ∞Ä', range: [1.0, 2.5], description: 'AIÏùò ÏÑ∏Í≥ÑÎ•º ÌÉêÌóòÌïòÍ∏∞ ÏãúÏûëÌïú Îã®Í≥ÑÏûÖÎãàÎã§.\nÍ∏∞Î≥∏ Í∞úÎÖêÏùÑ ÏùµÌûàÍ≥† Í∞ÑÎã®Ìïú AI ÎèÑÍµ¨ ÏÇ¨Ïö©Î≤ïÏùÑ Î∞∞Ïö∞Îäî ÏãúÍ∏∞ÏûÖÎãàÎã§.' },
    { name: 'üôå ÌôúÏö©Ïûê', range: [2.6, 3.5], description: 'AIÎ•º ÏùºÏÉÅÍ≥º ÏóÖÎ¨¥Ïóê ÌôúÏö©ÌïòÍ≥† ÏûàÏäµÎãàÎã§.\nÎã§ÏñëÌïú ÎèÑÍµ¨Î•º ÏãúÎèÑÌïòÍ≥† Í≤∞Í≥ºÎ•º Í≤ÄÏ¶ùÌïòÎäî ÏäµÍ¥ÄÏùÑ Í∏∞Î•¥Î©¥ Ï¢ãÏäµÎãàÎã§.' },
    { name: 'üåü Ï†ÑÎ¨∏Í∞Ä', range: [3.6, 4.2], description: 'AIÎ•º Ï∞ΩÏùòÏ†ÅÏúºÎ°ú ÌôúÏö©ÌïòÎäî Ï†ÑÎ¨∏Í∞ÄÏûÖÎãàÎã§.\nÌåÄ ÎÇ¥ AI ÌôúÏö©ÏùÑ ÏÑ†ÎèÑÌïòÍ≥† Î≥µÏû°Ìïú Î¨∏Ï†ú Ìï¥Í≤∞Ïóê AIÎ•º Ï†ÅÏö©Ìï©ÎãàÎã§.' },
    { name: 'üöÄ ÌòÅÏã†Í∞Ä', range: [4.3, 5.0], description: 'AIÎ°ú ÏÉàÎ°úÏö¥ Í∞ÄÏπòÎ•º Ï∞ΩÏ∂úÌïòÎäî ÌòÅÏã†Í∞ÄÏûÖÎãàÎã§.\nÏ°∞ÏßÅÏùò AI Ï†ÑÌôòÏùÑ Ï£ºÎèÑÌïòÍ≥† ÎØ∏Îûò Ï†ÑÎûµÏùÑ ÏàòÎ¶ΩÌï©ÎãàÎã§.' },
];

const PROFILES = {
    'Í∑†ÌòïÌòï': { description: 'Î™®Îì† ÏòÅÏó≠ÏóêÏÑú Í≥†Î•∏ Ï†êÏàò Î∂ÑÌè¨', suggestion: 'Í∞ÄÏû• Í¥ÄÏã¨ ÏûàÎäî ÏòÅÏó≠ÏùÑ ÏÑ†ÌÉùÌï¥ Ïã¨Ìôî Î∞úÏ†Ñ' },
    'Ïã§ÌñâÌòï': { description: 'ÌôúÏö© Îä•Î†•ÏùÄ ÎÜíÏúºÎÇò Ïù¥Î°†/Ïú§Î¶¨ Î∂ÄÏ°±', suggestion: 'Ïù¥Î°†Ï†Å Î∞∞Í≤ΩÍ≥º Ïú§Î¶¨Ï†Å Í≥†Î†§ÏÇ¨Ìï≠ Î≥¥Í∞ï' },
    'Ïù¥Î°†Ìòï': { description: 'Í∞úÎÖê Ïù¥Ìï¥Îäî ÎÜíÏúºÎÇò Ïã§Ï†ú ÌôúÏö© Î∂ÄÏ°±', suggestion: 'Ïã§ÏäµÍ≥º ÌîÑÎ°úÏ†ùÌä∏ Í∏∞Î∞ò ÌïôÏäµ Í∂åÏû•' },
    'ÎØ∏ÎûòÌòï': { description: 'ÏÑ±Ïû•/Ï†ÅÏùëÎ†• ÎÜíÏúºÎÇò ÌòÑ ÌôúÏö© Î∂ÄÏ°±', suggestion: 'ÌòÑÏû¨ ÌôúÏö© Í∞ÄÎä•Ìïú ÎèÑÍµ¨ ÏßëÏ§ë Ïã§Ïäµ' },
};

const GROWTH_SUGGESTIONS = {
    'üòä ÌÉêÌóòÍ∞Ä': [
        '**Ïò®ÎùºÏù∏ Í∞ïÏùòÎÇò ÎèÑÏÑú**Î•º ÌÜµÌï¥ AI Í∏∞Ï¥à ÏõêÎ¶¨Î•º ÌïôÏäµÌïòÍ≥†, Îß§Ïùº 10Î∂ÑÏî© ChatGPTÏôÄ ÎåÄÌôîÌïòÎ©∞ AIÏôÄ ÏπúÌï¥Ï†∏Î≥¥ÏÑ∏Ïöî.',
        '**Ïä§ÌÑ∞Îîî Í∑∏Î£πÏù¥ÎÇò ÏÇ¨ÎÇ¥ Ïª§ÎÆ§ÎãàÌã∞**Ïóê Ï∞∏Ïó¨ÌïòÏó¨ ÎèôÎ£åÎì§Í≥º AI ÌôúÏö© ÌåÅÏùÑ Í≥µÏú†ÌïòÍ≥† Ìï®Íªò ÏÑ±Ïû•ÌïòÎäî ÌïôÏäµ ÌååÌä∏ÎÑàÎ•º Ï∞æÏïÑÎ≥¥ÏÑ∏Ïöî.',
        'Î≥∏ ÍµêÏú°Í≥ºÏ†ïÏóêÏÑú Ï†úÍ≥µÎêòÎäî **ÎßûÏ∂§Ìòï AI ÏΩîÏπ≠**ÏùÑ ÌÜµÌï¥ Í∂ÅÍ∏àÏ¶ùÏùÑ Ìï¥Í≤∞ÌïòÍ≥†, Í∞úÏù∏ÌôîÎêú ÌïôÏäµ Í≤ΩÎ°úÎ•º ÏÑ§Í≥ÑÎ∞õÎäî Í≤ÉÏùÑ Ï∂îÏ≤úÌï©ÎãàÎã§.'
    ],
    'üôå ÌôúÏö©Ïûê': [
        'ÏûêÏã†Ïùò ÏßÅÎ¨¥Ïóê ÌäπÌôîÎêú **‚ÄòÎÇòÎßåÏùò ÌîÑÎ°¨ÌîÑÌä∏ ÎùºÏù¥Î∏åÎü¨Î¶¨‚Äô**Î•º Íµ¨Ï∂ïÌïòÍ≥†, ÎèôÎ£åÎì§Í≥º Í≥µÏú†ÌïòÎ©∞ Í≥†ÎèÑÌôîÏãúÏºúÎ≥¥ÏÑ∏Ïöî.',
        'Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ±, Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù Îì± ÌäπÏ†ï Î™©Ï†ÅÏùò AI Ìà¥ÏùÑ 1~2Í∞ú Ï†ïÌï¥ ÍπäÏù¥ ÏûàÍ≤å ÌïôÏäµÌïòÎäî **Ïã¨Ìôî Í≥ºÏ†ï**Ïóê Ï∞∏Ïó¨Ìï¥Î≥¥ÏÑ∏Ïöî.',
        '**Ï†ÑÎ¨∏Í∞Ä ÏΩîÏπ≠**ÏùÑ ÌÜµÌï¥ ÌòÑÏû¨ ÏóÖÎ¨¥ ÌîÑÎ°úÏÑ∏Ïä§Î•º AIÎ°ú ÌòÅÏã†ÌïòÎäî Í∞úÏù∏ ÌîÑÎ°úÏ†ùÌä∏Î•º ÏßÑÌñâÌïòÎ©∞ Ïã§ÏßàÏ†ÅÏù∏ ÏÑ±Í≥µ ÏÇ¨Î°ÄÎ•º ÎßåÎì§Ïñ¥Î≥¥ÏÑ∏Ïöî.'
    ],
    'üåü Ï†ÑÎ¨∏Í∞Ä': [
        'ÌåÄ ÎÇ¥ **‚ÄòAI ÌôúÏö© ÏÇ¨Î°Ä Í≥µÏú†Ìöå‚Äô**Î•º Ï†ïÍ∏∞Ï†ÅÏúºÎ°ú Ï£ºÏµúÌïòÍ≥†, Íµ¨ÏÑ±ÏõêÎì§ÏùÑ ÎèïÎäî **‚ÄòAI Ï±îÌîºÏñ∏‚Äô** Ïó≠Ìï†ÏùÑ ÏàòÌñâÌïòÎ©∞ Î¶¨ÎçîÏã≠ÏùÑ Î∞úÌúòÌïòÏÑ∏Ïöî.',
        'Ïô∏Î∂Ä Ï†ÑÎ¨∏Í∞Ä Ïª§ÎÆ§ÎãàÌã∞ÎÇò Ïª®ÌçºÎü∞Ïä§Ïóê Ï∞∏Ïó¨ÌïòÏó¨ ÏµúÏã† Ìä∏Î†åÎìúÎ•º ÌïôÏäµÌïòÍ≥†, Ïù¥Î•º Ï°∞ÏßÅÏóê ÎÇ¥Ïû¨ÌôîÌïòÎäî Î∞©ÏïàÏùÑ Î™®ÏÉâÌïòÏÑ∏Ïöî.',
        '**Î¶¨ÎçîÏã≠ ÏΩîÏπ≠**ÏùÑ ÌÜµÌï¥ ÌåÄÏùò AI ÎèÑÏûÖ Ï†ÑÎûµÏùÑ ÏàòÎ¶ΩÌïòÍ≥†, Ï°∞ÏßÅ ÎÇ¥ÏóêÏÑú ÏûêÏã†Ïùò ÏòÅÌñ•Î†•ÏùÑ ÌôïÎåÄÌïòÎäî Î∞©Î≤ïÏùÑ ÌïôÏäµÌï† Ïàò ÏûàÏäµÎãàÎã§.'
    ],
    'üöÄ ÌòÅÏã†Í∞Ä': [
        'Ï°∞ÏßÅÏùò ÎπÑÏ†ÑÍ≥º Ïó∞Í≥ÑÎêú **‚ÄòAI Transformation Î°úÎìúÎßµ‚Äô**ÏùÑ ÏàòÎ¶ΩÌïòÍ≥†, Í≤ΩÏòÅÏßÑÏùÑ ÏÑ§ÎìùÌïòÏó¨ Ï†ÑÏÇ¨Ï†ÅÏù∏ ÏßÄÏõêÏùÑ ÌôïÎ≥¥ÌïòÏÑ∏Ïöî.',
        'AIÎ•º ÌôúÏö©Ìïú Ïã†Í∑ú ÎπÑÏ¶àÎãàÏä§ Î™®Îç∏ÏùÑ Í∏∞ÌöçÌïòÍ≥† **PoC(Proof of Concept) ÌîÑÎ°úÏ†ùÌä∏**Î•º Î¶¨Îî©ÌïòÎ©∞ ÏïÑÏù¥ÎîîÏñ¥Î•º ÌòÑÏã§Î°ú ÎßåÎìúÏÑ∏Ïöî.',
        'ÏµúÍ≥† ÏàòÏ§ÄÏùò **Ï†ÑÎ¨∏Í∞Ä ÏΩîÏπ≠ Î∞è Ïª®ÏÑ§ÌåÖ**ÏùÑ ÌÜµÌï¥ Í∏∞Ïà†Ï†Å ÌÜµÏ∞∞Î†•ÏùÑ ÎπÑÏ¶àÎãàÏä§ Ï†ÑÎûµÏúºÎ°ú Ï†ÑÌôòÌïòÍ≥† Ï°∞ÏßÅ Ï†ÑÏ≤¥Ïùò Î≥ÄÌôîÎ•º Ïù¥ÎÅåÏñ¥Î≥¥ÏÑ∏Ïöî.'
    ],
};

// --- Helper Functions ---

const getUserLevel = (score: number) => {
    return LEVELS.find(l => score >= l.range[0] && score <= l.range[1]) || LEVELS[0];
};

const getUserProfile = (scores: { understanding: number; application: number; criticalThinking: number; }) => {
    const { understanding, application, criticalThinking } = scores;
    const scoreValues = Object.values(scores);
    const maxScore = Math.max(...scoreValues);
    const minScore = Math.min(...scoreValues);
    const diff = maxScore - minScore;

    if (diff <= 1.0) return 'Í∑†ÌòïÌòï';
    if (application === maxScore && application - minScore > 1.0) return 'Ïã§ÌñâÌòï';
    if (understanding === maxScore && understanding - application > 1.0) return 'Ïù¥Î°†Ìòï';
    if (criticalThinking === maxScore && criticalThinking - application > 1.0) return 'ÎØ∏ÎûòÌòï';
    return 'Í∑†ÌòïÌòï'; // Default case
};


const ResultsPage: React.FC = () => {
    const { userId } = useParams<{ userId: string }>();
    const [result, setResult] = useState<DiagnosisResult | null>(null);
    const [isLoading, setIsLoading] = useState(true);
    const [isFetching, setIsFetching] = useState(true);
    const [isDownloadingPdf, setIsDownloadingPdf] = useState(false);


    useEffect(() => {
        const getResultData = async () => {
            if (!userId) {
                setIsFetching(false);
                return;
            }

            try {
                setIsFetching(true);
                const submissionData = await fetchSubmissionById(userId);
                
                const scores = {
                    understanding: Number(submissionData.understanding) || 0,
                    application: Number(submissionData.application) || 0,
                    criticalThinking: Number(submissionData.criticalThinking) || 0,
                };
                const overall = (scores.understanding + scores.application + scores.criticalThinking) / 3;

                setIsLoading(true); // Loading feedback
                const feedback = await generateDiagnosisFeedback(scores);
                setIsLoading(false);

                setResult({ 
                    scores, 
                    overall, 
                    feedback, 
                    submissionData: { userId, timestamp: submissionData.timestamp, responses: submissionData }
                });

            } catch (error) {
                console.error("Failed to fetch result data", error);
                setResult(null);
            } finally {
                setIsFetching(false);
            }
        };

        getResultData();
    }, [userId]);
    
    const qualitativeData = useMemo(() => {
        if (!result) return null;
        
        const level = getUserLevel(result.overall);
        const profileKey = getUserProfile(result.scores);
        const profile = PROFILES[profileKey as keyof typeof PROFILES];
        const suggestions = GROWTH_SUGGESTIONS[level.name as keyof typeof GROWTH_SUGGESTIONS];
        
        return { level, profile: { name: profileKey, ...profile }, suggestions };
    }, [result]);

     const chartData = useMemo(() => {
        if (!result) return [];
        return [
            { name: 'Ïù¥Ìï¥', score: result.scores.understanding, fill: '#00A9FF' },
            { name: 'ÌôúÏö©', score: result.scores.application, fill: '#00E0C7' },
            { name: 'ÎπÑÌåêÏ†Å ÏÇ¨Í≥†', score: result.scores.criticalThinking, fill: '#FFBB28' },
        ];
    }, [result]);


    const handleDownloadPDF = async () => {
        if (!result?.submissionData.responses.name || isDownloadingPdf) {
            return;
        }
        setIsDownloadingPdf(true);
        const rootEl = document.getElementById('results-content');
        const originalBg = document.body.style.backgroundColor;

        document.body.style.backgroundColor = '#ffffff';
        if (rootEl) rootEl.classList.add('pdf-light-theme');
        
        await new Promise(resolve => setTimeout(resolve, 100));

        try {
            await downloadResultsAsPDF('results-content', `AI_Competency_Diagnosis_${result.submissionData.responses.name}`);
        } catch (error) {
            console.error("PDF Download failed", error);
        } finally {
            if (rootEl) rootEl.classList.remove('pdf-light-theme');
            document.body.style.backgroundColor = originalBg;
            setIsDownloadingPdf(false);
        }
    };
    
    if (isFetching) {
        return <div className="text-center p-10"><Spinner /></div>;
    }

    if (!result || !qualitativeData) {
        return <div className="text-center text-2xl font-bold p-10 bg-slate-800/50 rounded-lg shadow-md border border-slate-700">ÏßÑÎã® Í≤∞Í≥ºÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.</div>;
    }
    
    const pdfStyles = `
        .pdf-light-theme, .pdf-light-theme > div {
            background-color: #ffffff !important;
            background-image: none !important;
            color: #1e293b !important;
            border-color: #e2e8f0 !important;
        }
        .pdf-light-theme h1, .pdf-light-theme h2, .pdf-light-theme p, .pdf-light-theme strong, .pdf-light-theme span, .pdf-light-theme li {
             color: #1e293b !important;
        }
        .pdf-light-theme .text-cyan-400 { color: #0891b2 !important; }
        .pdf-light-theme .text-cyan-300 { color: #06b6d4 !important; }
        .pdf-light-theme .text-transparent { color: #1e293b !important; }
        .pdf-light-theme .pdf-feedback-card {
            background-color: #eff6ff !important;
            border-color: #93c5fd !important;
            color: #1e3a8a !important;
        }
         .pdf-light-theme .pdf-explanation-card {
            background-color: #f8fafc !important;
            border-color: #e2e8f0 !important;
        }
        .pdf-light-theme .recharts-wrapper .recharts-surface {
            background-color: transparent !important;
        }
        .pdf-light-theme .recharts-text, .pdf-light-theme .recharts-cartesian-axis-tick-value {
             fill: #1e293b !important;
        }
    `;

    return (
        <div className="max-w-5xl mx-auto">
            <style>{pdfStyles}</style>
             <div id="results-content" className="space-y-10">
                <div className="bg-slate-900/50 backdrop-blur-sm border border-slate-700/50 p-8 md:p-12 rounded-2xl shadow-2xl text-center">
                    <h1 className="text-3xl md:text-4xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-white to-cyan-300">{result.submissionData.responses.name}ÎãòÏùò AI Ïó≠Îüâ ÏßÑÎã® Î¶¨Ìè¨Ìä∏</h1>
                    <p className="text-slate-400 mt-2">{new Date(result.submissionData.timestamp).toLocaleString('ko-KR')} Í∏∞Ï§Ä</p>
                </div>
                
                <div className="bg-slate-900/50 backdrop-blur-sm border border-slate-700/50 p-8 md:p-10 rounded-2xl shadow-2xl">
                    <h2 className="text-2xl md:text-3xl font-bold text-slate-200 mb-6 text-center">üèÜ ÎãπÏã†Ïùò AI ÌôúÏö© ÏàòÏ§Ä</h2>
                    <div className="bg-slate-800/50 p-8 rounded-lg text-center border border-slate-700 pdf-explanation-card">
                        <p className="text-4xl font-bold text-cyan-400 mb-4">{qualitativeData.level.name}</p>
                        <p className="text-slate-300 text-lg whitespace-pre-line leading-relaxed">{qualitativeData.level.description}</p>
                    </div>
                </div>

                <div className="bg-slate-900/50 backdrop-blur-sm border border-slate-700/50 p-8 md:p-10 rounded-2xl shadow-2xl">
                    <h2 className="text-2xl md:text-3xl font-bold text-slate-200 mb-8 text-center">üìà ÏòÅÏó≠Î≥Ñ Ïó≠Îüâ ÌîÑÎ°úÌïÑ</h2>
                    <div className="grid md:grid-cols-2 gap-8 items-center pdf-explanation-card bg-slate-800/50 p-8 rounded-lg border border-slate-700">
                         <div className="w-full h-full flex items-center">
                            <ResponsiveContainer width="100%" height={200}>
                                <BarChart data={chartData} layout="vertical" margin={{ top: 0, right: 30, left: 10, bottom: 0 }}>
                                    <XAxis type="number" domain={[0, 5]} hide />
                                    <YAxis type="category" dataKey="name" width={80} tick={{ fill: '#e2e8f0', fontSize: 16 }} axisLine={false} tickLine={false} />
                                    <Tooltip cursor={{fill: 'rgba(30, 41, 59, 0.5)'}} contentStyle={{ backgroundColor: '#1e293b', border: '1px solid #334155' }}/>
                                    <Bar dataKey="score" barSize={30} radius={[0, 10, 10, 0]}>
                                        {chartData.map((entry, index) => <Cell key={`cell-${index}`} fill={entry.fill} />)}
                                    </Bar>
                                </BarChart>
                            </ResponsiveContainer>
                        </div>
                        <div className="text-center md:text-left bg-slate-900/50 p-6 rounded-lg">
                            <p className="text-xl text-slate-400">ÌîÑÎ°úÌïÑ Ïú†Ìòï</p>
                            <p className="text-3xl font-bold text-white mt-1">{qualitativeData.profile.name}</p>
                            <p className="mt-4 text-slate-300"><strong>ÌäπÏßï:</strong> {qualitativeData.profile.description}</p>
                            <p className="mt-2 text-cyan-300"><strong>Î∞úÏ†Ñ Ï†úÏïà:</strong> {qualitativeData.profile.suggestion}</p>
                        </div>
                    </div>
                </div>

                <div className="bg-slate-900/50 backdrop-blur-sm border border-slate-700/50 p-8 md:p-10 rounded-2xl shadow-2xl">
                    <h2 className="text-2xl md:text-3xl font-bold text-slate-200 mb-6 text-center">üå± Îã§Ïùå Îã®Í≥ÑÎ•º ÏúÑÌïú ÎßûÏ∂§Ìòï ÏÑ±Ïû• Ï†úÏïà</h2>
                    <div className="bg-slate-800/50 p-8 rounded-lg border border-slate-700 pdf-explanation-card">
                        <ul className="space-y-4 list-disc list-inside text-slate-300 text-lg">
                            {qualitativeData.suggestions.map((item, index) => <li key={index} dangerouslySetInnerHTML={{ __html: item }} />)}
                        </ul>
                    </div>
                </div>

                <div className="bg-slate-900/50 backdrop-blur-sm border border-slate-700/50 p-8 md:p-10 rounded-2xl shadow-2xl">
                    <h2 className="text-2xl md:text-3xl font-bold text-slate-200 mb-6 text-center">ü§ñ AI ÏÉùÏÑ± ÎßûÏ∂§ Î∂ÑÏÑù Î∞è Ï†úÏñ∏</h2>
                     {isLoading ? <Spinner /> : (
                        <div className="bg-blue-900/30 p-8 rounded-lg whitespace-pre-wrap text-base text-blue-200 leading-relaxed border border-blue-500/50 pdf-feedback-card">
                            {result?.feedback}
                        </div>
                    )}
                </div>
            </div>
            <div className="text-center mt-8">
                <button 
                    onClick={handleDownloadPDF}
                    disabled={isDownloadingPdf}
                    className="bg-green-600 text-white font-bold py-3 px-8 rounded-lg text-lg hover:bg-green-500 transition-all shadow-lg border-2 border-green-400 disabled:bg-slate-500 disabled:cursor-not-allowed flex items-center justify-center mx-auto"
                >
                    {isDownloadingPdf ? (
                        <>
                            <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-3"></div>
                            PDF ÏÉùÏÑ± Ï§ë...
                        </>
                    ) : (
                       'üìÑ Í≤∞Í≥º PDFÎ°ú Ï†ÄÏû•ÌïòÍ∏∞'
                    )}
                </button>
            </div>
        </div>
    );
};

export default ResultsPage;